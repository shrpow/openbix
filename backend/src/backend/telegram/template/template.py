from datetime import datetime
from typing import Any, MutableMapping

import jinja2
from backend.game_account.dto import GameAccountDTO
from backend.i18n.language import Language
from backend.subscription.dto import SubscriptionDTO
from backend.tariff.dto import TariffDTO
from backend.telegram.template.utils import (
    prettify_timedelta,
    simplify_hours,
    strftime,
    to_skeleton,
)
from backend.user.dto import UserDTO


class StringLoader(jinja2.BaseLoader):
    __templates: dict[str, jinja2.Template] = {}

    def load(
        self,
        environment: jinja2.Environment,
        name: str,
        globals: MutableMapping[str, Any] | None = None,
    ) -> jinja2.Template:
        if not (template := self.__templates.get(name)):
            code = environment.compile(source=name)
            template = self.__templates[name] = jinja2.Template.from_code(
                environment=environment, code=code, globals=globals or {}
            )

        return template


class BaseTemplate:
    __env = jinja2.Environment(loader=StringLoader(), trim_blocks=True)
    __env.filters["simplify_hours"] = simplify_hours
    __env.filters["strftime"] = strftime
    __env.filters["prettify_timedelta"] = prettify_timedelta

    content: dict[Language, str]

    def render(self, language: Language, *args, **kwargs) -> str:
        return (
            self.__env.get_template(name=self.content[language])
            .render(**kwargs)
            .replace("    ", "")
        )

    def render_skeleton(self, language: Language) -> str:
        return (
            self.__env.get_template(
                name=f"<span class='tg-spoiler'>{to_skeleton(content=self.content[language], placeholder="ü§î")}</span>"
            )
            .render()
            .replace("    ", "")
        )


class MainMenuTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "üß∂ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        Language.EN: "üß∂ Main menu",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class GreetingTemplate(BaseTemplate):
    content: dict[Language, str] = {Language.RU: "üëã –ü—Ä–∏–≤–µ—Ç!", Language.EN: "üëã Hello!"}

    def render(self, language: Language) -> str:
        return super().render(language=language)


class NoSubscriptionAlertTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "–ü–æ—Ö–æ–∂–µ, —É —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ ‚Äî –ø—Ä–∏–æ–±—Ä–µ—Ç–∏ –µ—ë —É {{ support }}!",
        Language.EN: "It looks like you don't have an active subscription ‚Äî purchase it from {{ support }}!",
    }

    def render(self, language: Language, support: str) -> str:
        return super().render(language, support=support)


class SubscriptionDetailsTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "–ü–æ–¥–ø–∏—Å–∫–∞ ({subscription.uuid})",
        Language.EN: "Subscription ({subscription.uuid})",
    }

    def render(self, language: Language, subscription: SubscriptionDTO) -> str:
        return super().render(language=language, subscription=subscription)


class LanguageQuestionTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "üåé –í—ã–±–µ—Ä–∏ —è–∑—ã–∫",
        Language.EN: "üåé Select a language",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class PartnershipDetailsTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            üí∏ –ü–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞
            –ü—Ä–∏–≥–ª–∞—à–∞–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –ø–æ–ª—É—á–∞–π 10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏—Ö –ø–æ–∫—É–ø–æ–∫!

            <a href="{{ deeplink }}">üîó –¢–≤–æ—è —Å—Å—ã–ª–∫–∞-–ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ</a>
            –í—Å–µ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {{ invitee_count }}

            <i>–ë–∞–ª–∞–Ω—Å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤–∫–ª–∞–¥–∫–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"</i>
        """,
        Language.EN: """
            üí∏ Affiliate Program
            Invite users and get 10% of the cost of their purchases!

            <a href="{{ deeplink }}">üîó Your invitation link</a>
            Total referrals: {{ invitee_count }}

            <i>The balance is in the "My Profile" tab</i>
        """,
    }

    def render(self, language: Language, deeplink: str, invitee_count: int) -> str:
        return super().render(
            language=language, deeplink=deeplink, invitee_count=invitee_count
        )


class UserProfileTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            –ë–∞–ª–∞–Ω—Å: {{ user.balance }}
            {% if subscription %}
                {% if subscription.active_until %}
                    –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {{ subscription.active_until | strftime("%d.%m.%Y %H:%M") }} ({{ tariff.name.ru }})
                {% else %}
                    –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ –∑–∞–∫–∞—Ç–∞ —Å–æ–ª–Ω—Ü–∞ –≤ –≤—ã–¥—É–º–∞–Ω–Ω–æ–º —Ç–≤–æ–∏–º –≤—ã—á—É—Ä–Ω—ã–º —Å–æ–∑–Ω–∞–Ω–∏–µ–º –º–∏—Ä–µ ({{ tariff.name.ru }})
                {% endif %}
            {% else %}
                –ü–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
            {% endif %}
            ID: <code>{{ user.uuid }}</code>
            –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {{ user.created_at | strftime("%d.%m.%Y %H:%M") }}
        """,
        Language.EN: """
            üë§ User Profile
            Balance: {{ user.balance }}
            {% if subscription %}
                {% if subscription.active_until %}
                    Subscription is valid until {{ subscription.active_until | strftime("%m/%d/%Y %H:%M") }} ({{ tariff.name.en }})
                {% else %}
                    Subscription is valid for the rest of your life
                {% endif %}
            {% else %}
                No subscription yet
            {% endif %}
            ID: <code>{{ user.uuid }}</code>
            Registered at: {{ user.created_at | strftime("%m/%d/%Y %H:%M") }}
        """,
    }

    def render(
        self,
        language: Language,
        user: UserDTO,
        tariff: TariffDTO | None,
        subscription: SubscriptionDTO | None,
    ) -> str:
        return super().render(
            language=language, user=user, tariff=tariff, subscription=subscription
        )


class UserFoundSummaryTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
            ID: <code>{{ user.uuid }}</code>
            {% if subscription %}
                {% if subscription.active_until %}
                    –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –¥–æ {{ subscription.active_until | strftime("%d.%m.%Y %H:%M") }} ({{ tariff.name.ru }})
                {% else %}
                    –ü–æ–¥–ø–∏—Å–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –≤—Å–µ–≥–¥–∞
                {% endif %}
            {% else %}
                –ü–æ–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç
            {% endif %}
        """,
        Language.EN: """
            üë§ The user has been found
            ID: <code>{{ user.uuid }}</code>
            {% if subscription %}
                {%if subscription.active_until %}
                    Subscription is valid until {{ subscription.active_until | strftime("%m/%d/%Y %H:%M") }} ({{ tariff.name.ru }})
                {% else %}
                    The subscription is valid forever
                {% endif %}
            {% else %}
                There is no subscription yet
            {% endif %}
        """,
    }

    def render(
        self, language: Language, user: UserDTO, subscription: SubscriptionDTO | None
    ) -> str:
        return super().render(language, user=user, subscription=subscription)


class TariffSelectTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "üëæ –í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ",
        Language.EN: "üëæ Choose a tariff",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class AvailableTariffsTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            üëæ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
            –ù–∞–∂–º–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É
        """,
        Language.EN: """
            üëæ Available tariffs
            Click one of the buttons below to buy a subscription
        """,
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class UserTelegramIdQuestionTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "üÜî –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        Language.EN: "üÜî Send me the telegram user id",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class InvalidTelegramIdTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π",
        Language.EN: "‚õîÔ∏è Invalid Telegram ID. Try another one",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class UserNotFoundTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑",
        Language.EN: "‚õîÔ∏è User not found. Try again",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class UserAlreadyHasSubscriptionTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚ÑπÔ∏è –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
        Language.EN: "‚ÑπÔ∏è The user has an active subscription",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class LanguageSetTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫",
        Language.EN: "‚úÖ The English language is set",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class TariffInfoTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            {{ tariff.name }}
        """,
        Language.EN: "‚úÖ The English language is set",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class TariffItemTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "{{ tariff.name.ru }} (${{ tariff.price }} –Ω–∞ {{ (tariff.subscription_duration | simplify_hours).ru }}, –¥–æ {{ tariff.max_game_accounts }} –∞–∫–∫. MBX)",
        Language.EN: "{{ tariff.name.en }} (${{ tariff.price }} for {{ (tariff.subscription_duration | simplify_hours).en }}, up to {{ tariff.max_game_accounts }} MBX accounts)",
    }

    def render(self, language: Language, tariff: TariffDTO) -> str:
        return super().render(language=language, tariff=tariff)


class SubscriptionPreviewTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–∏—Ñ {{ tariff.name.ru }}
            –°—Ç–æ–∏–º–æ—Å—Ç—å: ${{ tariff.price }} {{ "(–ï—Å–ª–∏ –≤—ã–≤–µ—Å—Ç–∏ –±–æ–Ω—É—Å—ã, $"+ discount_price + ")" if tariff.price > 0 and discount_price != "-" else ""}}
            <i>–ü–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è</i>
        """,
        Language.EN: """
            The selected tariff is {{ tariff.name.en }}
            Cost: ${{ tariff.price }} {{ "(If you withdraw bonuses, $"+ discount_price + ")" if tariff.price > 0 and discount_price != "-" else ""}}
            <i>The subscription will be created only after selecting the action</i>
        """,
    }

    def render(
        self,
        language: Language,
        user: UserDTO,
        tariff: TariffDTO,
        subscription: SubscriptionDTO,
        discount_price: str,
    ) -> str:
        return super().render(
            language=language,
            user=user,
            tariff=tariff,
            subscription=subscription,
            discount_price=discount_price,
        )


class SubscriptionIssuedTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–Ω–∞!",
        Language.EN: "‚úÖ The subscription has been successfully issued!",
    }

    def render(self, language: Language) -> str:
        return super().render(language=language)


class SubscriptionCongratulationTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            ü•≥ –ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏!
            {% if subscription.active_until %}
                –û–Ω–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ {{ subscription.active_until | strftime("%d.%m.%Y %H:%M") }}
            {% else %}
                –û–Ω–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–≥–¥–∞
            {% endif%}
            –¢–∞—Ä–∏—Ñ: {{ tariff.name.ru }}
        """,
        Language.EN: """
            ü•≥ Thank you for purchasing a subscription!
            {% if subscription.active_until %}
                It will be valid until {{ subscription.active_until | strftime("%m/%d/%Y %H:%M") }}
            {% else %}
                It will valid for infinity
            {% endif%}
            Tariff: {{ tariff.name.en }}
        """,
    }

    def render(
        self, language: Language, tariff: TariffDTO, subscription: SubscriptionDTO
    ) -> str:
        return super().render(
            language=language, tariff=tariff, subscription=subscription
        )


class GameAccountDetailsTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            {{ offset }}/{{ total_count }}. –ê–∫–∫–∞—É–Ω—Ç {{ game_account.name | e }}
            –°—Ç–∞—Ç—É—Å: {{ "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if game_account.status == "active" else "‚ö´Ô∏è –ù–µ–∞–∫—Ç–∏–≤–µ–Ω" }}
            –ë–∞–ª–∞–Ω—Å: {{ game_account.balance or "-" }}
            –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {{ ((current_time - game_account.last_login_at) | prettify_timedelta).ru + " –Ω–∞–∑–∞–¥" if game_account.last_login_at else "-" }} 
            –ü—Ä–æ–∫—Å–∏: <code>{{ game_account.proxy }}</code>
        """,
        Language.EN: """
            {{ offset }}/{{ total_count }}. Account {{ game_account.name | e }}
            Status: {{ "üü¢ Active" if game_account.status == "active" else "‚ö´Ô∏è Inactive" }}
            Balance: {{ game_account.balance or "-" }}
            Last login: {{ ((current_time - game_account.last_login_at) | prettify_timedelta).en + " ago" if game_account.last_login_at else "-" }} 
            Proxy: <code>{{ game_account.proxy }}</code>
        """,
    }

    def render(
        self,
        language: Language,
        offset: int,
        total_count: int,
        game_account: GameAccountDTO,
        current_time: datetime,
    ) -> str:
        return super().render(
            language,
            offset=offset,
            total_count=total_count,
            game_account=game_account,
            current_time=current_time,
        )


class NoGameAccountsTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚àÖ –ê–∫–∫–∞—É–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö, –∏ –æ–Ω–∏ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è!",
        Language.EN: "‚àÖ No accounts found. Add them and they will appear here!",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class GameAccountCannotBeCreatedTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –û—à–∏–±–∫–∞: –ò—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏",
        Language.EN: "‚õîÔ∏è Error: The tariff limit has been reached or you do not have an active subscription",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class GameAccountNameTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "üè∑Ô∏è –í–≤–µ–¥–∏ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞, —Ç–∞–∫ —Ç–µ–±–µ –±—É–¥–µ—Ç —É–¥–æ–±–Ω–µ–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –Ω—É–∂–Ω—ã–π –≤ –±–æ–ª—å—à–æ–º —Å–ø–∏—Å–∫–µ (1-30 —Å–∏–º–≤–æ–ª–æ–≤)",
        Language.EN: "üè∑Ô∏è Enter the account name, so it will be easier for you to find the one you need in a large list (1-30 characters)",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class InvalidAccountNameTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ",
        Language.EN: "‚õîÔ∏è Incorrect account name. Try again",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class GameAccountWebAppLinkTutorialTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            üîó –û—Ç–ø—Ä–∞–≤—å —Å—Å—ã–ª–∫—É –æ—Ç Telegram WebApp
            –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ:
            1. –í–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏ WebApp (<a href="https://core.telegram.org/bots/webapps#debug-mode-for-mini-apps">–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–∞—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è</a>)
            2. –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–≥—Ä—ã –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ª–∞–¥—á–∏–∫ (–ø–∫–º -> –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —ç–ª–µ–º–µ–Ω—Ç –∏–ª–∏ f12)
            3. –ó–∞–π—Ç–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É <b>Console</b>, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É <code>window.location.href</code> –∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å URL <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é</b>.
        """,
        Language.EN: """
            üîó Send a link from Telegram WebApp
            To do this:
            1. Enable WebApp debugging mode (<a href="https://core.telegram.org/bots/webapps#debug-mode-for-mini-apps ">official documentation</a>)
            2. Open the game and run the debugger (right mouse click -> check element or f12)
            3. Go to the <b>Console</b> tab, send the command <code>window.location.href</code> and copy the URL <b>completely</b>.
        """,
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class InvalidGameAccountWebAppLinkTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ",
        Language.EN: "‚õîÔ∏è Incorrect link. Try again",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class GameAccountProxyQuestionTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """
            üï∂Ô∏è –û—Ç–ø—Ä–∞–≤—å –æ–¥–∏–Ω –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º
            –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –ø—Ä–æ—Ç–æ–∫–æ–ª—ã: socks4, socks5, http, https
            –§–æ—Ä–º–∞—Ç: protocol://[username:password@]ip[:port]
            <i>–§—Ä–∞–≥–º–µ–Ω—Ç—ã [–º–µ–∂–¥—É —Å–∫–æ–±–æ–∫] –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã</i>
        """,
        Language.EN: """
            üï∂Ô∏è Send one proxy to work with your account
            Supported protocols: socks4, socks5, http, https
            Format: protocol://[username:password@]ip:port
            <i>Fragments [between brackets] are optional</i>
        """,
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class InvalidGameAccountProxyTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ–∫—Å–∏. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ",
        Language.EN: "‚õîÔ∏è Incorrect proxy. Try again",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class CaptchaRecognitionProviderApiKeyQuestionTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: """üîë –£–∫–∞–∂–∏ API-–∫–ª—é—á –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º <a href="https://2captcha.com/?from=21763837">2captcha (aka rucaptcha)</a>""",
        Language.EN: """üîë Specify the API key for working with the <a href="https://2captcha.com/?from=21763837">2captcha</a> service""",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class InvalidCaptchaRecognitionProviderApiKeyTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π API-–∫–ª—é—á. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ",
        Language.EN: "‚õîÔ∏è Incorrect API key. Try again",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class InvalidGameAccountLoginInfoTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞–∫–∫–∞—É–Ω—Ç–æ–º. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ",
        Language.EN: "‚õîÔ∏è Incorrect data for working with the account. Try again",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class InvalidGameAccountSomethingTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚õîÔ∏è –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫: –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ–∫—Å–∏, –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏, –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π API-–∫–ª—é—á rucaptcha/2captcha –∏–ª–∏ –∏—Å—á–µ—Ä–ø–∞–Ω –ª–∏–º–∏—Ç —Ç–∞—Ä–∏—Ñ–∞",
        Language.EN: "‚õîÔ∏è Something went wrong: This account may have already been added. There may be an unsuitable proxy, there is no active subscription, invalid rucaptcha/2captcha API key or the tariff limit has been reached",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class GameAccountCreateCongratulationTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "ü•≥ –ê–∫–∫–∞—É–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!",
        Language.EN: "ü•≥ The account has been added succesfully!",
    }

    def render(self, language: Language) -> str:
        return super().render(language)


class ParticipiationNeededTemplate(BaseTemplate):
    content: dict[Language, str] = {
        Language.RU: "‚úã –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª {{ channel_name }}, –∞ –∑–∞—Ç–µ–º –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞",
        Language.EN: "‚úã To use this functionality, subscribe to the {{ channel_name }} channel and then try again",
    }

    def render(self, language: Language, channel_name: str) -> str:
        return super().render(language, channel_name=channel_name)


class Template:
    INFO_MAIN_MENU = MainMenuTemplate()
    INFO_USER_PROFILE = UserProfileTemplate()
    INFO_TARIFFS = AvailableTariffsTemplate()
    INFO_TARIFF_ITEM = TariffItemTemplate()
    INFO_SUBSCRIPTION_DETAILS = SubscriptionDetailsTemplate()
    INFO_PARTNERSIP_DETAILS = PartnershipDetailsTemplate()
    INFO_SUBSCRIPTION_PREVIEW = SubscriptionPreviewTemplate()
    INFO_GAME_ACCOUNT = GameAccountDetailsTemplate()
    NOTIFICATION_GREETING = GreetingTemplate()
    NOTIFICATION_NO_SUBSCRIPTION = NoSubscriptionAlertTemplate()
    NOTIFICATION_INVALID_TELEGRAM_ID = InvalidTelegramIdTemplate()
    NOTIFICATION_USER_FOUND = UserFoundSummaryTemplate()
    NOTIFICATION_USER_NOT_FOUND = UserNotFoundTemplate()
    NOTIFICATION_USER_ALREADY_HAS_SUBSCRIPTION = UserAlreadyHasSubscriptionTemplate()
    NOTIFICATION_LANGUAGE_SET = LanguageSetTemplate()
    NOTIFICATION_SUBSCRIPTION_ISSUED = SubscriptionIssuedTemplate()
    NOTIFICATION_SUBSCRIPTION_PURCHASED = SubscriptionCongratulationTemplate()
    NOTIFICATION_NO_GAME_ACCOUNTS_ADDED = NoGameAccountsTemplate()
    NOTIFICATION_GAME_ACCOUNT_CANNOT_BE_CREATED = GameAccountCannotBeCreatedTemplate()
    NOTIFICATION_INVALID_GAME_ACCOUNT_NAME = InvalidAccountNameTemplate()
    NOTIFICATION_INVALID_WEB_APP_LINK = InvalidGameAccountWebAppLinkTemplate()
    NOTIFICATION_INVALID_PROXY = InvalidGameAccountProxyTemplate()
    NOTIFICATION_INVALID_LOGIN_INFO = InvalidGameAccountLoginInfoTemplate()
    NOTIFICATION_INVALID_SOMETHING = InvalidGameAccountSomethingTemplate()
    NOTIFICATION_INVALID_CAPTCHA_RECOGNITION_PROVIDER_API_KEY = (
        InvalidCaptchaRecognitionProviderApiKeyTemplate()
    )
    NOTIFICATION_GAME_ACCOUNT_CREATED = GameAccountCreateCongratulationTemplate()
    NOTIFICATION_PARTICIPIATION_NEEDED = ParticipiationNeededTemplate()
    QUESTION_LANGUAGE = LanguageQuestionTemplate()
    QUESTION_USER_TELEGRAM_ID = UserTelegramIdQuestionTemplate()
    QUESTION_TARIFF = TariffSelectTemplate()
    QUESTION_GAME_ACCOUNT_NAME = GameAccountNameTemplate()
    QUESTION_GAME_ACCOUNT_WEB_APP_LINK = GameAccountWebAppLinkTutorialTemplate()
    QUESTION_GAME_ACCOUNT_PROXY = GameAccountProxyQuestionTemplate()
    QUESTION_CAPTCHA_RECOGNITION_PROVIDER_API_KEY = (
        CaptchaRecognitionProviderApiKeyQuestionTemplate()
    )
